# Spirare ‚Äî Medita√ß√£o Guiada Interativa

Spirare √© um ritual de medita√ß√£o guiada constru√≠do com Next.js 15, TypeScript e TailwindCSS. A experi√™ncia apresenta## üß© Funcionalidades

### Interface de Medita√ß√£o

- **Overlay inicial**: bot√£o circular sem textos internos, apenas √≠cones (Play + Wind) com efeito l√≠quido.
- **Header**: badge de milestone, LED ritmado pelo metr√¥nomo e bot√£o "Avan√ßar Etapa".
- **Visualizador de respira√ß√£o**: barras em glassmorphism pulsando conforme o per√≠odo configurado.
- **Knob 3D**: controla o per√≠odo do metr√¥nomo com feedback de## üìö Documenta√ß√£o Adicional

### Core Documentation
- [`/rules/DATABASE.md`](../rules/DATABASE.md) - Complete database system documentation
- [`/rules/TYPE_SAFETY_RULES.md`](../rules/TYPE_SAFETY_RULES.md) - Type safety guidelines
- [`/rules/GLOBAL_API_TYPES.md`](../rules/GLOBAL_API_TYPES.md) - API type system documentation

### Development Guides
- [`.github/copilot-instructions.md`](.github/copilot-instructions.md) - This file - Development guidelines

### Quick Links
- All rules and patterns: [`/rules`](../rules/)
- Type definitions: [`/src/types`](../src/types/)
- React Query providers: [`/src/providers`](../src/providers/)

## üìÑ Licen√ßa micro-anima√ß√µes no ritmo das batidas.
- **Controles finais**: op√ß√µes para encerrar ou reiniciar a jornada; na fase final o metr√¥nomo permanece ativo.

### Sistema Administrativo

- **Gest√£o de √Åudios**: upload, edi√ß√£o e controle de trilhas sonoras de fundo.
- **Gest√£o de Temas**: cria√ß√£o e personaliza√ß√£o de temas de medita√ß√£o (ansiedade, foco, etc.).
- **Edi√ß√£o de Conte√∫do**: interface para modificar textos de cada fase da medita√ß√£o.
- **Estrutura Personaliz√°vel**: defini√ß√£o da ordem e dura√ß√£o dos elementos em cada etapa.
- **Valida√ß√£o Completa**: todos os dados s√£o validados com Zod antes de serem salvos.

### API e Dados

- **CRUD Completo**: endpoints REST para todas as opera√ß√µes de dados.
- **Valida√ß√£o de Schema**: Zod assegura integridade dos dados em todos os n√≠veis.
- **Type Safety**: TypeScript garante consist√™ncia entre frontend e backend.
- **Seeding Autom√°tico**: popula√ß√£o inicial do banco com dados estruturados.iva em √°udio, temporizadores inteligentes, visualiza√ß√£o r√≠tmica de respira√ß√£o e um sistema completo de gest√£o de conte√∫do.

## ‚ú® Experi√™ncia

- **Fluxo de 4 etapas √ó 4 momentos** ‚Äî jornada fixa para cultivar presen√ßa, respira√ß√£o, imagina√ß√£o e integra√ß√£o.
- **Narrativa por IA** ‚Äî cada instru√ß√£o √© narrada via rota `/api/speech` usando o modelo `gpt-4o-mini-tts`.
- **Timer l√≠quido + gr√°fico de respira√ß√£o** ‚Äî progresso circular combinado com visualizador em glassmorphism para indicar a cad√™ncia.
- **Metr√¥nomo com per√≠odo ajust√°vel** ‚Äî knob 3D controla o intervalo das batidas (600‚Äì1800 ms) e sincroniza o LED superior.
- **Controles conscientes** ‚Äî play/pause, pular momento, encerramento e rein√≠cio r√°pido.
- **Sistema de gest√£o completo** ‚Äî interface administrativa para editar conte√∫dos, temas e √°udios.
- **Banco de dados MongoDB** ‚Äî armazenamento estruturado com valida√ß√£o Zod para todos os dados.Medita√ß√£o Guiada Interativa

Spirare √© um ritual de medita√ß√£o guiada constru√≠do com Next.js 15, TypeScript e TailwindCSS. A experi√™ncia apresenta narrativa em √°udio, temporizadores inteligentes, visualiza√ß√£o r√≠tmica de respira√ß√£o e um metr√¥nomo l√≠quido que conduz a pr√°tica do in√≠cio ao fim.

## ‚ú® Experi√™ncia

- **Fluxo de 4 etapas √ó 4 momentos** ‚Äî jornada fixa para cultivar presen√ßa, respira√ß√£o, imagina√ß√£o e integra√ß√£o.
- **Narrativa por IA** ‚Äî cada instru√ß√£o √© narrada via rota `/api/speech` usando o modelo `gpt-4o-mini-tts`.
- **Timer l√≠quido + gr√°fico de respira√ß√£o** ‚Äî progresso circular combinado com visualizador em glassmorphism para indicar a cad√™ncia.
- **Metr√¥nomo com per√≠odo ajust√°vel** ‚Äî knob 3D controla o intervalo das batidas (600‚Äì1800‚ÄØms) e sincroniza o LED superior.
- **Controles conscientes** ‚Äî play/pause, pular momento, encerramento e rein√≠cio r√°pido.
- **Overlay inicial l√≠quido** ‚Äî bot√£o apenas com √≠cones seguindo o conceito ‚Äúliquid glass‚Äù.

## üß± Arquitetura

### Frontend (Interface de Medita√ß√£o)

| √Årea                                   | Descri√ß√£o                                                                                                    |
| -------------------------------------- | ------------------------------------------------------------------------------------------------------------ |
| `src/constants/meditation.ts`          | Conte√∫do can√¥nico da sess√£o (tema "Paz Interior", etapas e dura√ß√£o padr√£o de 120 s por subetapa).            |
| `src/app/components/meditation/`       | Conjunto modular de componentes (StartOverlay, SessionHeader, TimerPanel, BreathVisualizer, Controles etc.). |
| `src/app/components/meditation/hooks/` | Hooks dedicados para fala (`useSpeech`) e metr√¥nomo (`useMetronome`).                                        |

### Backend (API e Banco de Dados)

| √Årea                          | Descri√ß√£o                                                                                              |
| ----------------------------- | ------------------------------------------------------------------------------------------------------ |
| `src/app/api/speech/route.ts` | Rota Next.js que consome o SDK oficial da OpenAI para gerar o √°udio em tempo real.                     |
| `src/app/api/database/`       | CRUD APIs para √°udios, temas e conte√∫dos de medita√ß√£o.                                                 |
| `src/services/`               | Camada de servi√ßos para intera√ß√£o com MongoDB (AudioService, ThemeService, MeditationDatabaseService). |
| `src/types/database.ts`       | Schemas Zod para valida√ß√£o de dados e tipos TypeScript.                                                |

### Sistema de Gest√£o

| √Årea                          | Descri√ß√£o                                           |
| ----------------------------- | --------------------------------------------------- |
| `src/app/admin/`              | Interface administrativa para gest√£o de conte√∫dos.  |
| `src/scripts/seedDatabase.ts` | Script para popular o banco com dados iniciais.     |
| `DATABASE.md`                 | Documenta√ß√£o completa do sistema de banco de dados. |

> Todos os elementos interativos recebem `cursor: pointer`, garantindo consist√™ncia com a diretriz de intera√ß√£o do produto.

## üõ†Ô∏è Tecnologias

### Frontend

- Next.js 15 (App Router) + React 19
- TypeScript estrito
- TailwindCSS 4 (modo JIT) + Sass para estilos customizados
- `@tanstack/react-query` para data fetching e caching
- `react-circular-progressbar` para o halo de progresso
- `lucide-react` para iconografia
- Web Audio API para o metr√¥nomo granuloso
- OpenAI SDK (`gpt-4o-mini-tts`) para Text-to-Speech

### Backend & Database

- MongoDB (nativo driver) para armazenamento de dados
- Zod para valida√ß√£o de schemas
- Next.js API Routes para endpoints REST
- TypeScript para type safety em toda a aplica√ß√£o

### Data Fetching Pattern

- **`src/providers/`** - **OBRIGAT√ìRIO**: Todos os hooks de React Query (queries e mutations)
  - **Um provider por arquivo**: cada hook em seu pr√≥prio arquivo
  - Se precisar de escopo, crie um diret√≥rio (ex: `CategoryProviders/`)
  - **Queries**: Fetching de dados com cache autom√°tico (GET requests)
  - **Mutations**: Opera√ß√µes de escrita (POST, PUT, DELETE)
  - Exemplo de query: `useCategoriesQuery.ts`
  - Exemplo de mutation: `useCreateOrUpdateMutation.ts`
  - Cada provider exporta um √∫nico hook espec√≠fico
  - Centraliza toda l√≥gica de chamadas a APIs
  - `index.ts` re-exporta todos os providers

#### üö® Regra Cr√≠tica de Data Fetching

**TODAS as chamadas REST API devem ser feitas atrav√©s de React Query providers**

- ‚ùå **NUNCA** use `fetch()` diretamente em componentes ou p√°ginas
- ‚ùå **NUNCA** use `useEffect` + `fetch` para buscar dados
- ‚úÖ **SEMPRE** crie um provider em `src/providers/` usando `useQuery` ou `useMutation`
- ‚úÖ **SEMPRE** importe e use o hook do provider no componente
- ‚úÖ React Query gerencia cache, refetch, loading states automaticamente

**Exemplo INCORRETO:**

```typescript
// ‚ùå N√ÉO FA√áA ISSO
const [data, setData] = useState(null);
useEffect(() => {
  fetch("/api/categories")
    .then((r) => r.json())
    .then(setData);
}, []);
```

**Exemplo CORRETO:**

```typescript
// ‚úÖ FA√áA ISSO
// 1. Crie src/providers/useCategoriesQuery.ts
export const useCategoriesQuery = () => {
  return useQuery({
    queryKey: ["categories"],
    queryFn: async () => {
      const response = await fetch("/api/categories");
      return response.json();
    },
  });
};

// 2. Use no componente
import { useCategoriesQuery } from "@/providers";
const { data, isLoading, error } = useCategoriesQuery();
```

### üî∑ Type Safety Pattern

**TODOS os tipos devem ser compartilhados entre frontend e backend**

- **`src/types/`** - **OBRIGAT√ìRIO**: Todos os tipos TypeScript da aplica√ß√£o
  - `database.ts` - Schemas Zod e tipos de banco de dados (Theme, Audio, Structure, Meditations)
  - `api.ts` - Tipos de API (requests, responses, payloads)
  - `index.ts` - Re-exporta todos os tipos para import centralizado

#### üö® Regras Cr√≠ticas de Tipagem

**NUNCA defina tipos localmente em rotas de API ou providers**

- ‚ùå **NUNCA** crie `interface` dentro de arquivos de API routes (`/api/**/*.ts`)
- ‚ùå **NUNCA** crie `interface` dentro de providers (`/providers/**/*.ts`)
- ‚ùå **NUNCA** duplique tipos entre frontend e backend
- ‚úÖ **SEMPRE** defina tipos em `/src/types/api.ts` ou `/src/types/database.ts`
- ‚úÖ **SEMPRE** importe tipos de `@/types` ou `@/types/api`
- ‚úÖ **SEMPRE** use os mesmos tipos em API routes e providers

**Exemplo INCORRETO:**

```typescript
// ‚ùå N√ÉO FA√áA ISSO - tipo local em API route
// src/app/api/themes/route.ts
interface Theme {
  // ‚ùå ERRADO!
  category: string;
  title: string;
}

export async function GET() {
  const themes: Theme[] = await fetchThemes();
  return NextResponse.json({ themes });
}
```

```typescript
// ‚ùå N√ÉO FA√áA ISSO - tipo duplicado em provider
// src/providers/useThemesQuery.ts
interface Theme {
  // ‚ùå DUPLICADO!
  category: string;
  title: string;
}

async function fetchThemes(): Promise<Theme[]> {
  // ...
}
```

**Exemplo CORRETO:**

```typescript
// ‚úÖ FA√áA ISSO
// 1. Defina tipos em /src/types/api.ts
export interface GetThemesResponse {
  themes: Theme[];
}

// 2. Use no API route
// src/app/api/themes/route.ts
import type { GetThemesResponse } from "@/types/api";
import { Theme } from "@/types/database";

export async function GET() {
  const themes: Theme[] = await fetchThemes();
  const response: GetThemesResponse = { themes };
  return NextResponse.json(response);
}

// 3. Use no provider
// src/providers/useThemesQuery.ts
import type { GetThemesResponse } from "@/types/api";

async function fetchThemes() {
  const response = await fetch("/api/themes");
  const data: GetThemesResponse = await response.json();
  return data.themes;
}
```

**Estrutura de Tipos:**

```
src/types/
‚îú‚îÄ‚îÄ database.ts      # Schemas Zod + tipos de modelos (Theme, Audio, etc.)
‚îú‚îÄ‚îÄ api.ts          # Request/Response types para todas as APIs
‚îî‚îÄ‚îÄ index.ts        # Re-exporta tudo
```

**Benef√≠cios:**

- ‚úÖ Type safety total entre frontend e backend
- ‚úÖ Mudan√ßas em contratos de API detectadas em compile-time
- ‚úÖ IntelliSense completo em toda a aplica√ß√£o
- ‚úÖ Single source of truth para estruturas de dados
- ‚úÖ Refactoring seguro e automatizado

### Estrutura de Arquivos

- **`src/styles/`** - Todos os arquivos de estilo globais

  - Use Sass (`.sass` ou `.scss`) para estilos customizados
  - `globals.css` - estilos globais e configura√ß√£o do Tailwind
  - Evite CSS inline ou CSS modules quando poss√≠vel

- **`public/`** - Arquivos est√°ticos servidos diretamente
  - Todos os √≠cones e favicons devem estar aqui
  - Imagens, fontes, e outros assets p√∫blicos
  - Acess√≠vel via `/` (ex: `/icon.svg`)

## üé® Identidade de Marca

- **Nome**: Spirare
- **Ess√™ncia**: respira√ß√£o guiada, luz difusa, sensa√ß√£o de orbitar calma.
- **Paleta principal**:
  - Verde floresta `#065f46`
  - Verde brisa `#34d399`
  - Amarelo amanhecer `#fbbf24`
  - Marfim luminoso `#fef9f3`
- **Arquivos oficiais**:
  - Marca: `public/spirare-mark.svg`
  - Logotipo horizontal: `public/spirare-logotype.svg`
  - Favicon/App icon: `public/icon.svg`
- **Uso**: mantenha a marca sobre fundos claros transl√∫cidos (glassmorphism). Evite distorcer os cantos arredondados e preserve o brilho suave aplicado √†s superf√≠cies.

## üñ•Ô∏è Execu√ß√£o local

```bash
npm install
npm run dev
# abre em http://localhost:3000
```

### Vari√°veis de Ambiente

Crie um arquivo `.env.local` com:

```bash
# OpenAI API (para Text-to-Speech)
OPENAI_API_KEY=your_openai_api_key

# MongoDB (local ou Atlas)
MONGODB_URI=mongodb://localhost:27017
MONGODB_DB=spirare
```

### Inicializa√ß√£o do Banco de Dados

Ap√≥s configurar o MongoDB, popule com dados iniciais:

```bash
# Via API (aplica√ß√£o rodando)
curl -X POST http://localhost:3000/api/database/seed

# Ou acesse diretamente no navegador
# http://localhost:3000/api/database/seed
```

### Interface Administrativa

A interface administrativa √© protegida por autentica√ß√£o. As credenciais podem ser configuradas via vari√°veis de ambiente:

```bash
ADMIN_USERNAME=admin        # Padr√£o: admin
ADMIN_PASSWORD=abreuelima   # Padr√£o: abreuelima
```

Acesse a interface de gest√£o em:

```
http://localhost:3000/admin
```

## üß≠ Estrutura

```
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ [category]/               # Navega√ß√£o por categoria
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [stage]/             # Etapas da medita√ß√£o
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [practice]/      # Pr√°ticas espec√≠ficas
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [variant]/   # Variantes de texto
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
‚îÇ   ‚îú‚îÄ‚îÄ admin/                    # Interface administrativa
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ _components/         # Componentes espec√≠ficos do admin
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx           # Layout com autentica√ß√£o
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx             # P√°gina principal do admin
‚îÇ   ‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth/route.ts    # Autentica√ß√£o do admin
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ speech/route.ts      # Rota de TTS
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ categories/route.ts  # Lista de categorias
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ database/            # APIs CRUD para dados
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ route.ts         # Database principal
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ seed/route.ts    # Seeding do banco
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ audios/          # CRUD de √°udios
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ themes/          # CRUD de temas
‚îÇ   ‚îú‚îÄ‚îÄ components/              # Componentes globais puros (sem API calls)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ meditation/          # Componentes da experi√™ncia
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
‚îÇ   ‚îú‚îÄ‚îÄ query-provider.tsx       # React Query provider
‚îÇ   ‚îî‚îÄ‚îÄ page.tsx                 # Home com seletor de categoria
‚îú‚îÄ‚îÄ constants/meditation.ts      # Conte√∫do da sess√£o
‚îú‚îÄ‚îÄ providers/                   # React Query hooks para API calls
‚îÇ   ‚îú‚îÄ‚îÄ useCategoriesQuery.ts    # Query de categorias
‚îÇ   ‚îú‚îÄ‚îÄ mutations-example.ts     # Exemplo de mutations
‚îÇ   ‚îî‚îÄ‚îÄ index.ts                 # Exports centralizados
‚îú‚îÄ‚îÄ styles/                      # Estilos globais
‚îÇ   ‚îî‚îÄ‚îÄ globals.css              # Configura√ß√£o Tailwind e estilos base
‚îú‚îÄ‚îÄ services/                    # Camada de servi√ßos MongoDB
‚îÇ   ‚îú‚îÄ‚îÄ audiosService.ts
‚îÇ   ‚îú‚îÄ‚îÄ themesService.ts
‚îÇ   ‚îú‚îÄ‚îÄ meditationsService.ts
‚îÇ   ‚îú‚îÄ‚îÄ structureService.ts
‚îÇ   ‚îî‚îÄ‚îÄ databaseService.ts
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ seedDatabase.ts          # Script de inicializa√ß√£o
‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îú‚îÄ‚îÄ meditation.ts            # Tipagens da interface
‚îÇ   ‚îî‚îÄ‚îÄ database.ts              # Schemas Zod e tipos do banco
‚îî‚îÄ‚îÄ lib/mongodb.ts               # Conex√£o MongoDB
```

## üìê Organiza√ß√£o de Componentes

### Regras de Estrutura

- **`src/app/components/`** - Componentes **globais e puros**, sem chamadas a APIs

  - Componentes reutiliz√°veis em todo o app
  - Apenas recebem props e renderizam UI
  - Exemplo: bot√µes, cards, layouts gen√©ricos

- **`src/app/[route]/_components/`** - Componentes **espec√≠ficos de uma rota**

  - Usam o prefixo `_` para indicar que s√£o privados
  - Podem fazer chamadas a APIs e usar hooks de dados
  - Exemplo: `src/app/admin/_components/ThemeEditor.tsx`

- **`src/app/[route]/page.tsx`** - P√°ginas podem conter l√≥gica
  - L√≥gica de fetching com React Query
  - useState, useEffect e outros hooks
  - N√£o extrair em componentes separados a menos que necess√°rio para reuso

### Exemplo de Organiza√ß√£o

```typescript
src/app/
‚îú‚îÄ‚îÄ components/              # ‚úÖ Componentes puros globais
‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx          # Bot√£o reutiliz√°vel
‚îÇ   ‚îî‚îÄ‚îÄ Card.tsx            # Card gen√©rico
‚îú‚îÄ‚îÄ admin/
‚îÇ   ‚îú‚îÄ‚îÄ _components/        # ‚úÖ Componentes do admin
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ThemeForm.tsx  # Formul√°rio de tema (usa API)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AudioList.tsx  # Lista de √°udios (usa API)
‚îÇ   ‚îî‚îÄ‚îÄ page.tsx           # ‚úÖ P√°gina com l√≥gica inline
‚îî‚îÄ‚îÄ [category]/
    ‚îú‚îÄ‚îÄ _components/        # ‚úÖ Componentes da categoria
    ‚îÇ   ‚îî‚îÄ‚îÄ StageCard.tsx  # Card espec√≠fico de etapa
    ‚îî‚îÄ‚îÄ page.tsx           # ‚úÖ P√°gina com l√≥gica inline
```

## ÔøΩ M√©todo de Medita√ß√£o

### Estrutura de Composi√ß√£o

O sistema de medita√ß√£o comp√µe sess√µes dinamicamente a partir de tr√™s fontes:

1. **Base Global** (`meditations` collection): Frases padr√£o para todas as categorias
2. **M√©todo de Estrutura** (`structure.method`): Define a ordem das pr√°ticas
3. **Especificidades do Tema** (`structure.specifics` + `themes[].meditations`): Sobrescreve pr√°ticas espec√≠ficas

### Fluxo de Composi√ß√£o

1. **Frontend**: Seleciona categoria
2. **Backend**: Busca `structure.method` para determinar ordem das pr√°ticas
3. **Backend**: Para cada pr√°tica, pega **1 frase aleat√≥ria** de:

   - `meditations.opening.psychoeducation`
   - `meditations.opening.intention`
   - `meditations.opening.posture_and_environment`
   - `meditations.opening.initial_breathing`
   - `meditations.opening.attention_orientation`
   - `meditations.concentration.guided_breathing_rhythm`
   - `meditations.concentration.progressive_body_relaxation`
   - `meditations.concentration.non_judgmental_observation`
   - `meditations.concentration.functional_silence`
   - `meditations.exploration.main_focus`
   - `meditations.exploration.narrative_guidance_or_visualization`
   - `meditations.exploration.subtle_reflection_or_insight`
   - `meditations.exploration.emotional_integration`
   - `meditations.awakening.body_reorientation`
   - `meditations.awakening.final_breathing`
   - `meditations.awakening.intention_for_the_rest_of_the_day`
   - `meditations.awakening.closing`

4. **Aplica√ß√£o de Especificidades**: Verifica `structure.specifics[stage][practice]`
   - Se `true`: Substitui a frase base por uma aleat√≥ria de `themes[category].meditations[stage][practice]`
   - Se `false`: Mant√©m a frase da base global

### Exemplo

Para categoria "anxiety":

- `structure.specifics.opening.psychoeducation = true`
  ‚Üí Usa frase de `themes.anxiety.meditations.opening.psychoeducation[]`
- `structure.specifics.opening.intention = false`
  ‚Üí Usa frase de `meditations.opening.intention[]`

### Schema de Dados

```typescript
{
  meditations: {
    [stage]: {
      [practice]: string[]  // Base global
    }
  },
  structure: {
    method: Array<{ [stage]: string[] }>,  // Ordem das pr√°ticas
    specifics: {
      [stage]: {
        [practice]: boolean  // true = usa tema espec√≠fico
      }
    }
  },
  themes: [{
    category: string,
    meditations: {
      [stage]: {
        [practice]: string[]  // Sobrescreve quando specific = true
      }
    }
  }]
}
```

## ÔøΩüß© Intera√ß√£o em detalhes

- **Overlay inicial**: bot√£o circular sem textos internos, apenas √≠cones (Play + Wind) com efeito l√≠quido.
- **Header**: badge de milestone, LED ritmado pelo metr√¥nomo e bot√£o ‚ÄúAvan√ßar Etapa‚Äù.
- **Visualizador de respira√ß√£o**: barras em glassmorphism pulsando conforme o per√≠odo configurado.
- **Knob 3D**: controla o per√≠odo do metr√¥nomo com feedback de BPM e micro-anima√ß√µes no ritmo das batidas.
- **Controles finais**: op√ß√µes para encerrar ou reiniciar a jornada; na fase final o metr√¥nomo permanece ativo.

## üî≠ Pr√≥ximos passos sugeridos

- Gera√ß√£o din√¢mica de roteiros via IA a partir de temas livres.
- Biblioteca de trilhas sonoras ambientes expandida.
- Sistema de usu√°rios e hist√≥rico de sess√µes.
- Exporta√ß√£o de sess√µes e compartilhamento.
- Modo escuro multi-tons.
- Analytics de uso e progresso pessoal.
- Integra√ß√£o com dispositivos wearable para biofeedback.

## ÔøΩ Rules Directory

The `/rules` directory contains comprehensive documentation and guidelines for development patterns:

### Available Rules

- **`DATABASE.md`** - Complete database system documentation
  - MongoDB collections structure (themes, meditations, structure, audios)
  - Data schemas and validation rules
  - Seeding and migration procedures
  - Query patterns and aggregation examples

- **`TYPE_SAFETY_RULES.md`** - Type safety guidelines and enforcement
  - Centralized type definitions in `/src/types`
  - Shared types between frontend and backend
  - Examples of correct vs incorrect patterns
  - Benefits and impact of type safety

- **`GLOBAL_API_TYPES.md`** - API type system documentation
  - Complete API request/response types
  - Category breakdown (40+ type definitions)
  - Usage examples for backend and frontend
  - Integration with React Query providers

### Purpose

The `/rules` directory serves as:

‚úÖ **Reference Documentation** - Detailed specs for all system components  
‚úÖ **Development Guidelines** - Patterns and best practices to follow  
‚úÖ **Onboarding Resource** - Complete context for new developers  
‚úÖ **Quality Enforcement** - Standards for code reviews  

### When to Consult

- **Before** implementing new features that interact with the database
- **Before** creating new API routes or modifying existing ones
- **Before** defining new types or interfaces
- **During** code reviews to verify compliance with patterns
- **When** troubleshooting type errors or API contract issues

### Adding New Rules

When creating new patterns or conventions:

1. Document them in a new file in `/rules`
2. Use clear examples (correct ‚úÖ vs incorrect ‚ùå)
3. Explain the rationale and benefits
4. Update this section with a reference
5. Link from relevant code or commit messages

## ÔøΩüìö Documenta√ß√£o Adicional

- [`DATABASE.md`](DATABASE.md) - Documenta√ß√£o completa do sistema de banco de dados
- [`.github/copilot-instructions.md`](.github/copilot-instructions.md) - Instru√ß√µes para desenvolvimento com Copilot

## üìÑ Licen√ßa

Distribu√≠do sob licen√ßa MIT. Consulte `LICENSE` para mais detalhes.
